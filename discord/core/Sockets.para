import "asyncio/asyncio.para";
import "websockets/websockets.para";
import "json/json.para";
import "sched/sched.para";
import "std/time.para";
import "discord/core/Types.para";
//from pycord.core.types import Guild, User, Channel, Message

let PayloadError: type = {
};

let Cache: type = {
    func cachechannel(self, channel) {
        self.channels[channel.id] = channel;
        return channel;
    }

    func cachemessage(self, message) {
        self.messages[message.id] = message;
        return message;
    }

    func cacheuser(self, user) {
        self.users[user.id] = user;
        return user;
    }

    func cacheguild(self, guild) {
        self.guilds[guild.id] = guild;
        return guild;
    }

    func __init__(self) {
        self.channels = {};
        self.messages = {};
        self.users = {};
        self.guilds = {};
    }
};

let GatewayConnection: type = {
    func hello(self, payload) {
        if payload["op"] != 10 {
            raise PayloadError.new("Unexpected payload type '%i'" % payload["op"]);
        }

        self._heartrate = payload["d"]["heartbeat_interval"];
    }

    func ready(self, payload) {
        if payload["op"] != 0 {
            raise PayloadError.new("Unexpected payload type '%i'" % payload["op"]);
        }

         self.user = payload["d"]["user"];
         self.client.user = User(self.user);
    }

    func makechannel(self, data) {
        self.cache.cachechannel(Channel(self.client, data));
    }

    func makeuser(self, data) {
        self.cache.cacheuser(User(data));
    }

    func makeguild(self, data) {
        self.client.guildadded(self.cache.cacheguild(Guild(self.client, data)));
    }

    func event(self, payload) {
        if payload["t"] == "CHANNEL_CREATE" {
            self.makechannel(payload["d"]);
            return;
        }

        if payload["t"] == "GUILD_CREATE" {
            for ch in payload["d"]["channels"] {
                self.makechannel(ch); // Add all the guilds channels to the cache
            }

            for mem in payload["d"]["members"] {
                self.makeuser(mem["user"]);
            }

            self.makeguild(payload["d"]);
        }

        if payload["t"] == "MESSAGE_CREATE" {
            self.client.messagecreate(Message(self.client, payload["d"]));
            return;
        }
    }
            

    async func sendidentify(self, token) {
        payload = {};
        data = {};

        data["properties"] = { "$os": "linux", "$browser": "discord.para", "$device": "discord.para" };
        data["token"] = token;
        data["compress"] = false;
        data["intents"] = 769;

        payload["op"] = 2;
        payload["d"] = data;

        await self.ws.send(json.dumps(payload));
    }


    async func beat(self) {
        await self.ws.send(" { \"op\": 1, \"d\": null } ");
    }


    // Connects to the gateway and authenticates with a token, then enters the event loop
    async func authenticate(self, token, client) {
        self.client = client;
        self.cache = self.client.cache;

        self.ws = await websockets.connect(self.url);
        
        self.hello(json.loads(await self.ws.recv()));

        await self.sendidentify(token);

        self.ready(json.loads(await self.ws.recv()));

        sch = sched.scheduler(time, time.sleep);

        // Make sure this is actually sending the heartbeats!
        sch.enter(self._heartrate / 1000, 1, asyncio.run, self. beat);

        while true {
            payload = await self.ws.recv();

            self.event(json.loads(payload));
        }
    }


            
            

    func __init__(self, url) {
        self.url = url;
    }
};
