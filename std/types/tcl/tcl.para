let tcl = Type.extend({
  instance = {
    windowTitle
    variableName
    labels = Dict.new([], [])
    buttons = Dict.new([], [])
    entries = Dict.new([], [])
    texts = Dict.new([], [])
    frames = Dict.new([], [])

    func setWindowTitle(self, title) {
      self.windowTitle = title;
      return io.evaluate(self.variableName + '.title("' + title + '")');
    }

    addLabel
    addButton
    addEntry
    addText
    addFrame
  }

  func __construct__(self, name) {
    self.variableName = name;
    io.evaluate('import tkinter as tk; ' + self.variableName + ' = tk.Tk()');

    self.setWindowTitle(name);
    self.addLabel = label.new(self);
    self.addButton = button.new(self);
    self.addEntry = entry.new(self);
    self.addText = text.new(self);
    self.addFrame = frame.new(self);

    return self;
  }
});

let Frame = Type.extend({
  instance = {
    width
    height
    variableName
    master

    labels = Dict.new([], [])
    buttons = Dict.new([], [])
    entries = Dict.new([], [])
    texts = Dict.new([], [])
    frames = Dict.new([], [])

    tcl1

    addLabel
    addButton
    addEntry
    addText
    addFrame

    func setWidth(self, width) {
      self.width = width;
      return io.evaluate(self.variableName + '.config(width=' + width + ')');
    }

    func setHeight(self, height) {
      self.height = height;
      return io.evaluate(self.variableName + '.config(height=' + height + ')');
    }

    func setSize(self, width, height) {
      self.setWidth(width);
      return self.setHeight(height);
    }

    pack
    place
    grid

    destroy
  }

  func __construct__(self, name) {
    self.variableName = name;

    self.pack = doPack.new(self);
    self.place = doPlace.new(self);
    self.grid = doGrid.new(self);

    self.addLabel = label.new(self);
    self.addButton = button.new(self);
    self.addEntry = entry.new(self);
    self.addText = text.new(self);
    self.addFrame = frame.new(self);

    self.destroy = doDestroy.new(self);

    return self;
  }
});

let frame = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let width;
      let height;
      let bgColor;
      let fgColor;
      let master = self.tcl1.variableName;
      let code = 'import tkinter as tk; ' + text + ' = tk.Frame(';
      if args.len() > 0 {
        master = args[0];
        code += ', master=' + master;
      }
      if args.len() > 1 {
        width = args[1];
        code += ', width=' + width;
      }
      if args.len() > 2 {
        height = args[2];
        code += ', height=' + height;
      }
      if args.len() > 3 {
        bgColor = args[3];
        code += ', bg="' + bgColor + '"';
      }
      if args.len() > 4 {
        fgColor = args[4];
        code += ', fg="' + fgColor + '"';
      }
      code += ')';
      let index = 1;
      for frame in self.tcl1.frames {
        index += 1;
      }
      let fr = Frame.new('frame' + index.to_str());
      fr.tcl1 = self.tcl1;
      fr.master = master;
      self.tcl1.frame[text] = fr;
      io.evaluate(code);
      return fr;
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let Label = Type.extend({
  instance = {
    text
    variableName
    master
    
    tcl1

    func setText(self, text) {
      self.text = text;
      return io.evaluate(self.variableName + '.config(text="' + text + '")');
    }

    pack
    place
    grid

    destroy
  }

  func __construct__(self, name) {
    self.variableName = name;

    self.pack = doPack.new(self);
    self.place = doPlace.new(self);
    self.grid = doGrid.new(self);

    self.destroy = doDestroy.new(self);

    return self;
  }
});

let label = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let text = args[0];
      let bgColor;
      let fgColor;
      let master = self.tcl1.variableName;
      let code = 'import tkinter as tk; ' + text + ' = tk.Label(text="' + text + '"';
      if args.len() > 1 {
        bgColor = args[1];
        code += ', bg="' + bgColor + '"';
      }
      if args.len() > 2 {
        fgColor = args[2];
        code += ', fg="' + fgColor + '"';
      }
      if args.len() > 3 {
        master = args[3];
        code += ', master=' + master;
      }
      code += ')';
      let lb = Label.new(text);
      lb.tcl1 = self.tcl1;
      lb.master = master;
      self.tcl1.labels[text] = lb;
      io.evaluate(code);
      return lb;
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let Button = Type.extend({
  instance = {
    text
    width
    height
    variableName
    master
    
    tcl1

    func setText(self, text) {
      self.text = text;
      return io.evaluate(self.variableName + '.config(text="' + text + '")');
    }

    func setWidth(self, width) {
      self.width = width;
      return io.evaluate(self.variableName + '.config(width=' + width + ')');
    }

    func setHeight(self, height) {
      self.height = height;
      return io.evaluate(self.variableName + '.config(height=' + height + ')');
    }

    func setSize(self, width, height) {
      self.setWidth(width);
      return self.setHeight(height);
    }

    pack
    place
    grid

    destroy
  }

  func __construct__(self, name) {
    self.variableName = name;

    self.pack = doPack.new(self);
    self.place = doPlace.new(self);
    self.grid = doGrid.new(self);

    self.destroy = doDestroy.new(self);

    return self;
  }
});

let button = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let text = args[0];
      let bgColor;
      let fgColor;
      let master = self.tcl1.variableName;
      let code = 'import tkinter as tk; ' + text + ' = tk.Label(text="' + text + '"';
      if args.len() > 1 {
        width = args[1];
        code += ', width=' + width;
      }
      if args.len() > 2 {
        height = args[2];
        code += ', height=' + height;
      }
      if args.len() > 3 {
        bgColor = args[3];
        code += ', bg="' + bgColor + '"';
      }
      if args.len() > 4 {
        fgColor = args[4];
        code += ', fg="' + fgColor + '"';
      }
      if args.len() > 5 {
        master = args[5];
        code += ', master=' + master;
      }
      code += ')';
      let b = Button.new(text);
      b.tcl1 = self.tcl1;
      b.master = master;
      self.tcl1.buttons[text] = b;
      io.evaluate(code);
      return b;
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let Entry = Type.extend({
  instance = {
    text
    width
    height
    variableName
    master
    
    tcl1

    func setText(self, text) {
      self.text = text;
      return io.evaluate(self.variableName + '.config(text="' + text + '")');
    }

    func setWidth(self, width) {
      self.width = width;
      return io.evaluate(self.variableName + '.config(width=' + width + ')');
    }

    func setHeight(self, height) {
      self.height = height;
      return io.evaluate(self.variableName + '.config(height=' + height + ')');
    }

    func setSize(self, width, height) {
      self.setWidth(width);
      return self.setHeight(height);
    }

    get
    delete
    insert

    pack
    place
    grid

    destroy
  }

  func __construct__(self, name) {
    self.variableName = name;

    self.get = doGet.new(self);
    self.delete = doDelete.new(self);
    self.insert = doInsert.new(self);

    self.pack = doPack.new(self);
    self.place = doPlace.new(self);
    self.grid = doGrid.new(self);

    self.destroy = doDestroy.new(self);

    return self;
  }
});

let entry = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let bgColor;
      let fgColor;
      let master = self.tcl1.variableName;
      let index = 1;
      for entry1 in Range.new(self.tcl1.entries.len()) {
        index += 1;
      }
      print(index.to_str());
      let text = 'entry' + index.to_str();
      let code = 'import tkinter as tk; ' + text + ' = tk.Entry(text="' + text + '"';
      if args.len() > 0 {
        width = args[0];
        code += ', width=' + width;
      }
      if args.len() > 1 {
        bgColor = args[1];
        code += ', bg="' + bgColor + '"';
      }
      if args.len() > 2 {
        fgColor = args[2];
        code += ', fg="' + fgColor + '"';
      }
      if args.len() > 3 {
        master = args[3];
        code += ', master=' + master;
      }
      code += ')';
      let ent = Entry.new(text);
      ent.tcl1 = self.tcl1;
      ent.master = master;
      self.tcl1.entries = self.tcl1.entries.append([text, ent]);
      io.evaluate(code);
      return ent;
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let Text = Type.extend({
  instance = {
    text
    width
    height
    variableName
    master
    
    tcl1

    func setText(self, text) {
      self.text = text;
      return io.evaluate(self.variableName + '.config(text="' + text + '")');
    }

    func setWidth(self, width) {
      self.width = width;
      return io.evaluate(self.variableName + '.config(width=' + width + ')');
    }

    func setHeight(self, height) {
      self.height = height;
      return io.evaluate(self.variableName + '.config(height=' + height + ')');
    }

    func setSize(self, width, height) {
      self.setWidth(width);
      return self.setHeight(height);
    }

    get
    delete
    insert

    pack
    place
    grid

    destroy
  }

  func __construct__(self, name) {
    self.variableName = name;

    self.get = doGet.new(self);
    self.delete = doDelete.new(self);
    self.insert = doInsert.new(self);

    self.pack = doPack.new(self);
    self.place = doPlace.new(self);
    self.grid = doGrid.new(self);

    self.destroy = doDestroy.new(self);

    return self;
  }
});

let text = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let bgColor;
      let fgColor;
      let master = self.tcl1.variableName;
      let index = 1;
      for text1 in self.tcl1.texts {
        index += 1;
      }
      let text = 'text' + index.to_str();
      let code = 'import tkinter as tk; ' + text + ' = tk.Entry(text="' + text + '"';
      if args.len() > 1 {
        width = args[1];
        code += ', width=' + width;
      }
      if args.len() > 2 {
        bgColor = args[2];
        code += ', bg="' + bgColor + '"';
      }
      if args.len() > 3 {
        fgColor = args[3];
        code += ', fg="' + fgColor + '"';
      }
      if args.len() > 4 {
        master = args[4];
        code += ', master=' + master;
      }
      code += ')';
      let tex = Text.new(text);
      tex.tcl1 = self.tcl1;
      tex.master = master;
      self.tcl1.texts[text] = tex;
      io.evaluate(code);
      return tex;
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let doGet = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let index;
      let code = 'import tkinter as tk; ' + self.tcl1.variableName + '.get(';
      if args.len() > 0 {
        index = args[0];
        code += index.to_str();
      }
      code += ')';
      return io.evaluate(code);
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let doDelete = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let code = 'import tkinter as tk; ' + self.tcl1.variableName + '.delete(';
      let index1 = args[0];
      let index2;
      code += index1.to_str();
      if args.len() > 1 {
        index2 = args[1];
        if args[0].type() == Str {
          code += '"' + index2 + '"';
        }
        else {
          code += index2;
        }
        code += ', ' + index2.to_str();
      }
      code += ')';
      return io.evaluate(code);
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let doInsert = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let code = 'import tkinter as tk; ' + self.tcl1.variableName + '.insert(';
      let index = args[0];
      let text = args[1].to_str();
      if index.type() == Str {
        code += '"' + index.to_str() + '"';
      }
      else {
        code += index.to_str();
      }
      print("DDDDDDDDD");
      code += ', "';
      print('text: ' + text);
      code += text;
      code += '"';
      print("EEEEEEEEEEE");
      print(code);
      code += ')';
      print(code);
      print("FFFFFFFFFFFF");
      print(code);
      return io.evaluate(code);
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let doPack = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let padX;
      let padY;
      let code = 'import tkinter as tk; ' + self.tcl1.variableName + '.pack(';
      if args.len() > 0 {
        padX = args[0];
        code += 'padx=' + padX;
      }
      if args.len() > 1 {
        padY = args[1];
        code += ', pady=' + padY;
      }
      code += ')';
      return io.evaluate(code);
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let doPlace = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let x = args[0];
      let y = args[1];
      let padX;
      let padY;
      let sticky;
      let code = 'import tkinter as tk; ' + self.tcl1.variableName + '.place(';
      code += 'x="' + x + '"';
      code += ', y="' + y + '"';
      if args.len() > 2 {
        padX = args[2];
        code += 'padx=' + padX;
      }
      if args.len() > 3 {
        padY = args[3];
        code += ', pady=' + padY;
      }
      if args.len() > 4 {
        sticky = args[4];
        code += ', sticky="' + sticky + '"';
      }
      code += ')';
      return io.evaluate(code);
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let doGrid = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let row = args[0];
      let column = args[1];
      let code = 'import tkinter as tk; ' + self.tcl1.variableName + '.grid(';
      code += 'row="' + row + '"';
      code += ', column="' + column + '"';
      code += ')';
      return io.evaluate(code);
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});

let doDestroy = Func.extend({
  instance = {
    tcl1

    func __call__(self, _args) {
      let args = _args.from(1);
      let row = args[0];
      let column = args[1];
      let code = 'import tkinter as tk; ' + self.tcl1.variableName + '.destroy()';
      return io.evaluate(code);
    }
  }

  func __construct__(self, tcl1) {
    self.tcl1 = tcl1;

    return self;
  }
});
