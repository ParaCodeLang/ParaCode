let Dict = Iterable.extend({
    name = 'Dict'

    instance = {
        _value = [:]

        func __at__(self, key) {
            if !self.contains(key) {
                DictLookupError.new("Key doesn't exist!").raise();
                return null;
            }
            return __intern_dictionary_at__(self._value, key);
        }
        
        func __add__(self, value) {
            return self.append(value);
        }

        func __bitor__(self, value) {
            let res_dictionary = self.clone();

            let remaining = value.len();
            let len = value.len();

            let index;
            let item;

            while remaining != 0 {
                index = len - remaining;
                item = value.getpair(index);

                if res_dictionary.findpair(item) == -1 {
                    res_dictionary.append(item);
                }

                remaining -= 1;
            }

            return res_dictionary;
        }

        func __bitand__(self, value) {
            let res_dictionary = [:];

            let remaining = self.len();
            let len = self.len();

            let index;
            let item;

            while remaining != 0 {
                index = len - remaining;
                item = self.getpair(index);

                if value.findpair(item) != -1 {
                    res_dictionary.append(item);
                }

                remaining -= 1;
            }

            return res_dictionary;
        }

        func __iterate__(self, cb: Func) {
            let remaining = self.len();
            let len = self.len();

            while remaining != 0 {
                let index = len - remaining;

                cb(self.getpair(index));

                remaining -= 1;
            }
        }

        func to_str(self) {
            let str_result = '{';

            for index in Range.new(0, self.len()) {
                let pair = self.getpair(index);
                let key = pair[0];
                let value = pair[1];

                if value.type() == Str { str_result += "'"; }
                str_result += key.to_str();
                if value.type() == Str { str_result += "': '"; } else { str_result += ": "; }
                str_result += value.to_str();
                if value.type() == Str { str_result += "'"; }

                if index != (self.len() - 1) { // Precendence is whack
                    str_result += ", ";
                }
            }

            str_result += '}';

            return str_result;
        }

        func from(self, index) {
            let len = self.len();
            let newdict = [:];
            while index < len {
                newdict += self.getpair(index);
                index += 1;
            }
            return newdict;
        }

        func __set__(self, key, value) {
            __intern_dictionary_set__(self._value, key, value);
            return self;
        }
    }

    // Constructor (Value can be the dictionary value or its keys. Values is only for when you give keys)
    func __construct__(self, value, values=null) {
        if values != null {
            for i in Range.new(0, value.len()) {
                self[value[i]] = values[i];
            }
        }
        else {
            self._value = value;
        }
        return self;
    }

    func getkey(self, index) {
        return self.getpair(index)[0];
    }

    func getvalue(self, index) {
        return self.getpair(index)[1];
    }

    func getpair(self, index) {
        return __intern_dictionary_atindex__(self._value, index);
    }

    func indexatkey(self, key) {
        if !self.contains(key) {
            DictLookupError.new("Key doesn't exist!").raise();
            return null;
        }
        return __intern_dictionary_indexatkey__(self._value, key);
    }

    func contains(self, key) {
        return __intern_dictionary_contains__(self._value, key);
    }

    func to_array(self) {
        return [self.keys(), self.values()];
    }

    func len(self) {
        return __intern_dictionary_len__(self._value);
    }

    func append(self, value) {
        return __intern_dictionary_append__(self._value, value);
    }

    func update(self, key, value) {
        return self.clone().modify(key, value);
    }

    func clone(self) {
        return __intern_dictionary_clone__(self._value);
    }

    func find(self, key) {
        let length = self.len();
        let index = 0;
        while index != length {
            if self.getkey(index) == key {
                return index;
            }
            index += 1;
        }
        return -1;
    }

    func findpair(self, pair) {
        let length = self.len();
        let index = 0;
        while index != length {
            let p = self.getpair(index);
            if pair.len() == 2 {
                if p[0] == pair[0] && p[1] == pair[1] {
                    return index;
                }
            }
            else {
                DictLookupError.new("Invalid pair!").raise();
                return -1;
            }
            index += 1;
        }
        return -1;
    }

    func map(self, cb) {
        let result = [:];
        let remaining = self.len();
        let len = self.len();

        while remaining != 0 {
            let index = len - remaining;

            result.append(cb(self.getpair(index)));

            remaining -= 1;
        }

        return result;
    }

    // Iterable methods
    func step(self) {
        return 1;
    }

    func start(self) {
        return 0;
    }

    func end(self) {
        return self.len();
    }

    func keys(self) {
        return __intern_dictionary_keys__(self._value);
    }

    func values(self) {
        return __intern_dictionary_values__(self._value);
    }
});

// Type aliases
let dict       = Dict;
let Dictionary = Dict;
let dictionary = Dict;
