let Vector4 = Num.extend({
  name = 'Vector4'

  zero
  one
  neone
  up
  down
  right
  left
  foward
  backward

  instance = {
    x = 0.0
    y = 0.0
    z = 0.0
    w = 0.0

    func __eql__(self, other) {
      if other.type() != self.type() {
        return 0;
      }

      let same = __intern_default_compare__(self.x, other.x);
      same = same && __intern_default_compare__(self.y, other.y);
      same = same && __intern_default_compare__(self.z, other.z);
      same = same && __intern_default_compare__(self.w, other.w);
      return same;
    }

    func to_str(self) {
      return "[" + x.to_str() + ", " + y.to_str() + ", " + z.to_str() + ", " + w.to_str() + "]";
    }

    func to_array(self) {
      return [self.x, self.y, self.z, self.w];
    }

    func getX(self) {
      return self.x;
    }

    func getY(self) {
      return self.y;
    }

    func getZ(self) {
      return self.z;
    }

    func getW(self) {
      return self.w;
    }
  }

  func __construct__(self, _x, _y, _z, _w) {
      self.x = __intern_to_float__(_x);
      self.y = __intern_to_float__(_y);
      self.z = __intern_to_float__(_z);
      self.w = __intern_to_float__(_w);

      return self;
  }

  // operator methods
  
  func __add__(self, other) {
      let vec = __intern_float_add__(self.x, other.x);
      vec = __intern_float_add__(vec.y, other.y);
      vec = __intern_float_add__(vec.z, other.z);
      vec = __intern_float_add__(vec.w, other.w);
      return vec;
  }

  func __sub__(self, other) {     
      let vec = __intern_float_sub__(self.x, other.x);
      vec = __intern_float_sub__(vec.y, other.y);
      vec = __intern_float_sub__(vec.z, other.z);
      vec = __intern_float_sub__(vec.w, other.w);
      return vec;
  }
  
  func __mul__(self, other) {
      let vec = __intern_float_mul__(self.x, other.x);
      vec = __intern_float_mul__(vec.y, other.y);
      vec = __intern_float_mul__(vec.z, other.z);
      vec = __intern_float_mul__(vec.w, other.w);
      return vec;
  }

  func __div__(self, other) {     
      let vec = __intern_float_div__(self.x, other.x);
      vec = __intern_float_div__(vec.y, other.y);
      vec = __intern_float_div__(vec.z, other.z);
      vec = __intern_float_div__(vec.w, other.w);
      return vec;
  }
  
  func __mod__(self, other) {
      let vec = __intern_float_mod__(self.x, other.x);
      vec = __intern_float_mod__(vec.y, other.y);
      vec = __intern_float_mod__(vec.z, other.z);
      vec = __intern_float_mod__(vec.w, other.w);
      return vec;
  }
});

Vector4.zero = Vector4.new(0.0, 0.0, 0.0, 0.0);
Vector4.one = Vector4.new(0.0, 0.0, 0.0, 0.0);
Vector4.neone = Vector4.new(-1.0, -1.0, -1.0, -1.0);
Vector4.up = Vector4.new(0.0, 1.0, 0.0, 0.0);
Vector4.down = Vector4.new(0.0, -1.0, 0.0, 0.0);
Vector4.right = Vector4.new(1.0, 0.0, 0.0, 0.0);
Vector4.left = Vector4.new(-1.0, 0.0, 0.0, 0.0);
Vector4.foward = Vector4.new(0.0, 0.0, 1.0, 0.0);
Vector4.backward = Vector4.new(0.0, 0.0, -1.0, 0.0);
