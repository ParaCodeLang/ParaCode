let Vector3 = Num.extend({
  name = 'Vector3'

  zero
  one
  neone
  up
  down
  right
  left
  foward
  backward

  instance = {
    x = 0.0
    y = 0.0
    z = 0.0

    func __eql__(self, other) {
      if other.type() != self.type() {
        return 0;
      }

      let same = self.x + other.x;
      same = same && self.y + other.y;
      same = same && self.z + other.z;
      return same;
    }

    func to_str(self) {
      return "[" + self.x.to_str() + ", " + self.y.to_str() + ", " + self.z.to_str() + "]";
    }

    func to_array(self) {
      return [self.x, self.y, self.z];
    }

    func getX(self) {
      return self.x;
    }

    func getY(self) {
      return self.y;
    }

    func getZ(self) {
      return self.z;
    }
  }

  func __construct__(self, _x, _y, _z) {
      self.x = __intern_to_float__(_x);
      self.y = __intern_to_float__(_y);
      self.z = __intern_to_float__(_z);

      return self;
  }

  // operator methods
  
  func __add__(self, other) {
      let vec = Vector3.new(self.x + other.x, self.y + other.y, self.z + other.z);
      return vec;
  }

  func __sub__(self, other) {
      let vec = Vector3.new(self.x - other.x, self.y - other.y, self.z - other.z);
      return vec;
  }
  
  func __mul__(self, other) {
      let vec = Vector3.new(self.x * other.x, self.y * other.y, self.z * other.z);
      return vec;
  }

  func __div__(self, other) {     
      let vec = Vector3.new(self.x / other.x, self.y / other.y, self.z / other.z);
      return vec;
  }
  
  func __mod__(self, other) {
      let vec = Vector3.new(self.x % other.x, self.y % other.y, self.z % other.z);
      return vec;
  }
});

Vector3.zero = Vector3.new(0.0, 0.0, 0.0);
Vector3.one = Vector3.new(0.0, 0.0, 0.0);
Vector3.neone = Vector3.new(-1.0, -1.0, -1.0);
Vector3.up = Vector3.new(0.0, 1.0, 0.0);
Vector3.down = Vector3.new(0.0, -1.0, 0.0);
Vector3.right = Vector3.new(1.0, 0.0, 0.0);
Vector3.left = Vector3.new(-1.0, 0.0, 0.0);
Vector3.foward = Vector3.new(0.0, 0.0, 1.0);
Vector3.backward = Vector3.new(0.0, 0.0, -1.0);
