let IntVector3 = Num.extend({
  name = 'IntVector3'

  zero
  one
  neone
  up
  down
  right
  left
  foward
  backward

  instance = {
    x = 0
    y = 0
    z = 0

    func __eql__(self, other) {
      if other.type() != self.type() {
        return 0;
      }

      let same = __intern_default_compare__(self.x, other.x);
      same = same && __intern_default_compare__(self.y, other.y);
      same = same && __intern_default_compare__(self.z, other.z);
      return same;
    }

    func to_str(self) {
      return "[" + self.x.to_str() + ", " + self.y.to_str() + ", " + self.z.to_str() + "]";
    }

    func to_array(self) {
      return [self.x, self.y, self.z];
    }

    func getX(self) {
      return self.x;
    }

    func getY(self) {
      return self.y;
    }

    func getZ(self) {
      return self.z;
    }
  }

  func __construct__(self, _x, _y, _z) {
      self.x = __intern_to_int__(_x);
      self.y = __intern_to_int__(_y);
      self.z = __intern_to_int__(_z);

      return self;
  }

  // operator methods
  
  func __add__(self, other) {
      let vec = __intern_int_add__(self.x, other.x);
      vec = __intern_int_add__(vec.y, other.y);
      vec = __intern_int_add__(vec.z, other.z);
      return vec;
  }

  func __sub__(self, other) {     
      let vec = __intern_int_sub__(self.x, other.x);
      vec = __intern_int_sub__(vec.y, other.y);
      vec = __intern_int_sub__(vec.z, other.z);
      return vec;
  }
  
  func __mul__(self, other) {
      let vec = __intern_int_mul__(self.x, other.x);
      vec = __intern_int_mul__(vec.y, other.y);
      vec = __intern_int_mul__(vec.z, other.z);
      return vec;
  }

  func __div__(self, other) {     
      let vec = __intern_int_div__(self.x, other.x);
      vec = __intern_int_div__(vec.y, other.y);
      vec = __intern_int_div__(vec.z, other.z);
      return vec;
  }
  
  func __mod__(self, other) {
      let vec = __intern_int_mod__(self.x, other.x);
      vec = __intern_int_mod__(vec.y, other.y);
      vec = __intern_int_mod__(vec.z, other.z);
      return vec;
  }
});

IntVector3.zero = IntVector3.new(0, 0, 0);
IntVector3.one = IntVector3.new(1, 1, 1);
IntVector3.neone = IntVector3.new(-1, -1, -1);
IntVector3.up = IntVector3.new(0, 1, 0);
IntVector3.down = IntVector3.new(0, -1, 0);
IntVector3.right = IntVector3.new(1, 0, 0);
IntVector3.left = IntVector3.new(-1, 0, 0);
IntVector3.foward = IntVector3.new(0, 0, 1);
IntVector3.backward = IntVector3.new(0, 0, -1);
