let Matrix = Iterable.extend({
  name = 'Matrix'

  instance = {
    _value = []

    func __at__(self, index: int) {
      let rowIndex = 0;
      let colIndex = 0;

      let currentIndex = 0;
      for index1 in Range.new(0, self.len()) {
        for index2 in Range.new(0, self.len()) {
          if currentIndex < index {
            colIndex += 1;
          }
          currentIndex += 1;
        }
        if currentIndex < index {
          colIndex = 0;
          rowIndex += 1;
        }
      }
      let value = self._value[rowIndex][colIndex];
      return value;
    }

    func __iterate__(self, cb: Func) {
      let remainingCols = self.len();
      let remainingRows = self.len();
      let len = self.len();

      while remainingRows != 0 {
        let index = len - remainingRows;
        while remainingCols != 0 {
          let index2 = len - remainingCols;

          cb(self[index][index2]);

          remainingCols -= 1;
        }
        remainingRows -= 1;
        remainingCols = self.len();
      }
    }

    func to_str(self) {
      let str_result = '';

      for index in Range.new(0, self.len()) {
        str_result += '[';
        for index2 in Range.new(0, self.len()) {
          let item = self[index][index2];

          if item.type() == Str { str_result += "'"; }
          str_result += item.to_str();
          if item.type() == Str { str_result += "'"; }

          if index != self.len() - 1 {
            str_result += ', ';
          }
        }
        str_result += ']';
        if index != self.len() - 1 {
          str_result += ',\n';
        }
      }

      str_result += ']';

      return str_result;
    }

    func __set__(self, index, value) {
      let rowIndex = 0;
      let colIndex = 0;

      let currentIndex = 0;
      for index1 in Range.new(0, self.len()) {
        for index2 in Range.new(0, self.len()) {
          if currentIndex < index {
            colIndex += 1;
          }
          currentIndex += 1;
        }
        if currentIndex < index {
          colIndex = 0;
          rowIndex += 1;
        }
      }
      self._value[rowIndex][colIndex] = value;
      return self;
    }

//    // operator methods
//    func __add__(self, other) {
//      let vec = Vector2.new(self.x + other.x, self.y + other.y);
//      return vec;
//    }
//
//    func __sub__(self, other) {
//      let vec = Vector2.new(self.x - other.x, self.y - other.y);
//      return vec;
//    }
//
//    func __mul__(self, other) {
//      const a = this.elements;
//        const b = matrix.elements;
//
//        let result = new Mat4();
//
//        result.elements[0] = b[0] * a[0] + b[1] * a[4] + b[2] * a[8] + b[3] * a[12];
//        result.elements[1] = b[0] * a[1] + b[1] * a[5] + b[2] * a[9] + b[3] * a[13];
//        result.elements[2] = b[0] * a[2] + b[1] * a[6] + b[2] * a[10] + b[3] * a[14];
//        result.elements[3] = b[0] * a[3] + b[1] * a[7] + b[2] * a[11] + b[3] * a[15];
//
//        result.elements[4] = b[4] * a[0] + b[5] * a[4] + b[6] * a[8] + b[7] * a[12];
//        result.elements[5] = b[4] * a[1] + b[5] * a[5] + b[6] * a[9] + b[7] * a[13];
//        result.elements[6] = b[4] * a[2] + b[5] * a[6] + b[6] * a[10] + b[7] * a[14];
//        result.elements[7] = b[4] * a[3] + b[5] * a[7] + b[6] * a[11] + b[7] * a[15];
//
//        result.elements[8] = b[8] * a[0] + b[9] * a[4] + b[10] * a[8] + b[11] * a[12];
//        result.elements[9] = b[8] * a[1] + b[9] * a[5] + b[10] * a[9] + b[11] * a[13];
//        result.elements[10] = b[8] * a[2] + b[9] * a[6] + b[10] * a[10] + b[11] * a[14];
//        result.elements[11] = b[8] * a[3] + b[9] * a[7] + b[10] * a[11] + b[11] * a[15];
//
//        result.elements[12] = b[12] * a[0] + b[13] * a[4] + b[14] * a[8] + b[15] * a[12];
//        result.elements[13] = b[12] * a[1] + b[13] * a[5] + b[14] * a[9] + b[15] * a[13];
//        result.elements[14] = b[12] * a[2] + b[13] * a[6] + b[14] * a[10] + b[15] * a[14];
//        result.elements[15] = b[12] * a[3] + b[13] * a[7] + b[14] * a[11] + b[15] * a[15];
//
//        return result;
//    }
//
//    func __div__(self, other) {     
//      let vec = Vector2.new(self.x / other.x, self.y / other.y);
//      return vec;
//    }
//    
//    func __mod__(self, other) {
//      let vec = Vector2.new(self.x % other.x, self.y % other.y);
//      return vec;
//    }
  }

  func __construct__(self, size) {
    self._value = [];
    for index in Range.new(0, size) {
      let v = [];
      for index2 in Range.new(0, size) {
        v = v.append(0);
      }
      self._value = self._value.append(v);
    }
  }

  func contains(self, value) {
    return self.find(value) != -1;
  }

  func len(self) {
    let _rval = __intern_array_len__(self._value);
    return _rval;
  }

  func count(self) {
    let _rval = 0;
    for index in Range.new(0, self.len()) {
      for index2 in Range.new(0, self.len()) {
        _rval += 1;
      }
    }
    return _rval;
  }

  func update(self, index, value) {
    return self.clone().modify(index, value);
  }

  func clone(self) {
    let a = self._value.clone();
    let m = Matrix.new(a.len());
    for index in Range.new(0, a.len()) {
      for index2 in Range.new(0, a.len()) {
        m[index][index2] = a[index][index2];
      }
    }
    return m;
  }

  func find(self, value) {
    let length = self.len();
    let index = 0;
    let index1 = 0;
    let index2 = 0;
    while index1 != length {
      while index2 != length {
        if self._value[index1][index2] == value {
          return index;
        }
        index += 1;
        index1 += 1;
      }
      index2 += 1;
      index1 = 0;
    }
    return -1;
  }

  func map(self, cb) {
    let result = Matrix.new(self.len());
    for index in Range.new(0, self.len()) {
      for index2 in Range.new(0, self.len()) {
        result[index][index2] = cb(self[index][index2]);
      }
    }

    return result;
  }

  // iterable methods
  func step(self) {
    return 1;
  }

  func start(self) {
    return 0;
  }

  func end(self) {
    return self.len();
  }
});
