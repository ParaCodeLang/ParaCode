let Matrix4 = Iterable.extend({
  name = 'Matrix4'

  instance = {
    _value = []

    func __at__(self, index: int) {
      let value = self._value[index];
      return value;
    }

    func __iterate__(self, cb: Func) {
      let remaining = self.len();
      let len = self.len();

      while remaining != 0 {
        let index = len - remaining;

        cb(self[index]);

        remaining -= 1;
      }
    }

    func to_str(self) {
      let str_result = '';

      let i = -1;
      for index in Range.new(0, self.len()) {
        str_result += '[';
        for index2 in Range.new(0, self.len()) {
          i += 1;
          let item = self[i];
          //print(index.to_str() + ": " + index2.to_str() + ": " + i.to_str() + ": " + item.to_str());

          if item.type() == Str { str_result += "'"; }
          str_result += item.to_str();
          if item.type() == Str { str_result += "'"; }

          if index2 < (self.len() - 1) {
            str_result += ', ';
          }
        }
        str_result += ']';

        if index < (self.len() - 1) {
          str_result += ',\n';
        }
      }

      return str_result;
    }

    func __set__(self, index, value) {
      self._value[index] = value;
      return self;
    }

    // operator methods
    func __add__(self, other) {
      let a = self._value;
      let b = other._value;

      let result = Matrix4.new();

      result._value[0] = (b[0] + a[0]) + (b[1] + a[4]) + (b[2] + a[8]) + (b[3] + a[12]);
      result._value[1] = (b[0] + a[1]) + (b[1] + a[5]) + (b[2] + a[9]) + (b[3] + a[13]);
      result._value[2] = (b[0] + a[2]) + (b[1] + a[6]) + (b[2] + a[10]) + (b[3] + a[14]);
      result._value[3] = (b[0] + a[3]) + (b[1] + a[7]) + (b[2] + a[11]) + (b[3] + a[15]);

      result._value[4] = (b[4] + a[0]) + (b[5] + a[4]) + (b[6] + a[8]) + (b[7] + a[12]);
      result._value[5] = (b[4] + a[1]) + (b[5] + a[5]) + (b[6] + a[9]) + (b[7] + a[13]);
      result._value[6] = (b[4] + a[2]) + (b[5] + a[6]) + (b[6] + a[10]) + (b[7] + a[14]);
      result._value[7] = (b[4] + a[3]) + (b[5] + a[7]) + (b[6] + a[11]) + (b[7] + a[15]);

      result._value[8] = (b[8] + a[0]) + (b[9] + a[4]) + (b[10] + a[8]) + (b[11] + a[12]);
      result._value[9] = (b[8] + a[1]) + (b[9] + a[5]) + (b[10] + a[9]) + (b[11] + a[13]);
      result._value[10] = (b[8] + a[2]) + (b[9] + a[6]) + (b[10] + a[10]) + (b[11] + a[14]);
      result._value[11] = (b[8] + a[3]) + (b[9] + a[7]) + (b[10] + a[11]) + (b[11] + a[15]);

      result._value[12] = (b[12] + a[0]) + (b[13] + a[4]) + (b[14] + a[8]) + (b[15] + a[12]);
      result._value[13] = (b[12] + a[1]) + (b[13] + a[5]) + (b[14] + a[9]) + (b[15] + a[13]);
      result._value[14] = (b[12] + a[2]) + (b[13] + a[6]) + (b[14] + a[10]) + (b[15] + a[14]);
      result._value[15] = (b[12] + a[3]) + (b[13] + a[7]) + (b[14] + a[11]) + (b[15] + a[15]);

      return result;
    }

    func __sub__(self, other) {
      let a = self._value;
      let b = other._value;

      let result = Matrix4.new();

      result._value[0] = (b[0] - a[0]) + (b[1] - a[4]) + (b[2] - a[8]) + (b[3] - a[12]);
      result._value[1] = (b[0] - a[1]) + (b[1] - a[5]) + (b[2] - a[9]) + (b[3] - a[13]);
      result._value[2] = (b[0] - a[2]) + (b[1] - a[6]) + (b[2] - a[10]) + (b[3] - a[14]);
      result._value[3] = (b[0] - a[3]) + (b[1] - a[7]) + (b[2] - a[11]) + (b[3] - a[15]);

      result._value[4] = (b[4] - a[0]) + (b[5] - a[4]) + (b[6] - a[8]) + (b[7] - a[12]);
      result._value[5] = (b[4] - a[1]) + (b[5] - a[5]) + (b[6] - a[9]) + (b[7] - a[13]);
      result._value[6] = (b[4] - a[2]) + (b[5] - a[6]) + (b[6] - a[10]) + (b[7] - a[14]);
      result._value[7] = (b[4] - a[3]) + (b[5] - a[7]) + (b[6] - a[11]) + (b[7] - a[15]);

      result._value[8] = (b[8] - a[0]) + (b[9] - a[4]) + (b[10] - a[8]) + (b[11] - a[12]);
      result._value[9] = (b[8] - a[1]) + (b[9] - a[5]) + (b[10] - a[9]) + (b[11] - a[13]);
      result._value[10] = (b[8] - a[2]) + (b[9] - a[6]) + (b[10] - a[10]) + (b[11] - a[14]);
      result._value[11] = (b[8] - a[3]) + (b[9] - a[7]) + (b[10] - a[11]) + (b[11] - a[15]);

      result._value[12] = (b[12] - a[0]) + (b[13] - a[4]) + (b[14] - a[8]) + (b[15] - a[12]);
      result._value[13] = (b[12] - a[1]) + (b[13] - a[5]) + (b[14] - a[9]) + (b[15] - a[13]);
      result._value[14] = (b[12] - a[2]) + (b[13] - a[6]) + (b[14] - a[10]) + (b[15] - a[14]);
      result._value[15] = (b[12] - a[3]) + (b[13] - a[7]) + (b[14] - a[11]) + (b[15] - a[15]);

      return result;
    }

    func __mul__(self, other) {
      let a = self._value;
      let b = other._value;

      let result = Matrix4.new();

      result._value[0] = b[0] * a[0] + b[1] * a[4] + b[2] * a[8] + b[3] * a[12];
      result._value[1] = b[0] * a[1] + b[1] * a[5] + b[2] * a[9] + b[3] * a[13];
      result._value[2] = b[0] * a[2] + b[1] * a[6] + b[2] * a[10] + b[3] * a[14];
      result._value[3] = b[0] * a[3] + b[1] * a[7] + b[2] * a[11] + b[3] * a[15];

      result._value[4] = b[4] * a[0] + b[5] * a[4] + b[6] * a[8] + b[7] * a[12];
      result._value[5] = b[4] * a[1] + b[5] * a[5] + b[6] * a[9] + b[7] * a[13];
      result._value[6] = b[4] * a[2] + b[5] * a[6] + b[6] * a[10] + b[7] * a[14];
      result._value[7] = b[4] * a[3] + b[5] * a[7] + b[6] * a[11] + b[7] * a[15];

      result._value[8] = b[8] * a[0] + b[9] * a[4] + b[10] * a[8] + b[11] * a[12];
      result._value[9] = b[8] * a[1] + b[9] * a[5] + b[10] * a[9] + b[11] * a[13];
      result._value[10] = b[8] * a[2] + b[9] * a[6] + b[10] * a[10] + b[11] * a[14];
      result._value[11] = b[8] * a[3] + b[9] * a[7] + b[10] * a[11] + b[11] * a[15];

      result._value[12] = b[12] * a[0] + b[13] * a[4] + b[14] * a[8] + b[15] * a[12];
      result._value[13] = b[12] * a[1] + b[13] * a[5] + b[14] * a[9] + b[15] * a[13];
      result._value[14] = b[12] * a[2] + b[13] * a[6] + b[14] * a[10] + b[15] * a[14];
      result._value[15] = b[12] * a[3] + b[13] * a[7] + b[14] * a[11] + b[15] * a[15];

      return result;
    }

    func __div__(self, other) {
      let a = self._value;
      let b = other._value;

      let result = Matrix4.new();

      result._value[0] = b[0] / a[0] + b[1] / a[4] + b[2] / a[8] + b[3] / a[12];
      result._value[1] = b[0] / a[1] + b[1] / a[5] + b[2] / a[9] + b[3] / a[13];
      result._value[2] = b[0] / a[2] + b[1] / a[6] + b[2] / a[10] + b[3] / a[14];
      result._value[3] = b[0] / a[3] + b[1] / a[7] + b[2] / a[11] + b[3] / a[15];

      result._value[4] = b[4] / a[0] + b[5] / a[4] + b[6] / a[8] + b[7] / a[12];
      result._value[5] = b[4] / a[1] + b[5] / a[5] + b[6] / a[9] + b[7] / a[13];
      result._value[6] = b[4] / a[2] + b[5] / a[6] + b[6] / a[10] + b[7] / a[14];
      result._value[7] = b[4] / a[3] + b[5] / a[7] + b[6] / a[11] + b[7] / a[15];

      result._value[8] = b[8] / a[0] + b[9] / a[4] + b[10] / a[8] + b[11] / a[12];
      result._value[9] = b[8] / a[1] + b[9] / a[5] + b[10] / a[9] + b[11] / a[13];
      result._value[10] = b[8] / a[2] + b[9] / a[6] + b[10] / a[10] + b[11] / a[14];
      result._value[11] = b[8] / a[3] + b[9] / a[7] + b[10] / a[11] + b[11] / a[15];

      result._value[12] = b[12] / a[0] + b[13] / a[4] + b[14] / a[8] + b[15] / a[12];
      result._value[13] = b[12] / a[1] + b[13] / a[5] + b[14] / a[9] + b[15] / a[13];
      result._value[14] = b[12] / a[2] + b[13] / a[6] + b[14] / a[10] + b[15] / a[14];
      result._value[15] = b[12] / a[3] + b[13] / a[7] + b[14] / a[11] + b[15] / a[15];

      return result;
    }
    
    func __mod__(self, other) {
      let a = self._value;
      let b = other._value;

      let result = Matrix4.new();

      result._value[0] = b[0] % a[0] + b[1] % a[4] + b[2] % a[8] + b[3] % a[12];
      result._value[1] = b[0] % a[1] + b[1] % a[5] + b[2] % a[9] + b[3] % a[13];
      result._value[2] = b[0] % a[2] + b[1] % a[6] + b[2] % a[10] + b[3] % a[14];
      result._value[3] = b[0] % a[3] + b[1] % a[7] + b[2] % a[11] + b[3] % a[15];

      result._value[4] = b[4] % a[0] + b[5] % a[4] + b[6] % a[8] + b[7] % a[12];
      result._value[5] = b[4] % a[1] + b[5] % a[5] + b[6] % a[9] + b[7] % a[13];
      result._value[6] = b[4] % a[2] + b[5] % a[6] + b[6] % a[10] + b[7] % a[14];
      result._value[7] = b[4] % a[3] + b[5] % a[7] + b[6] % a[11] + b[7] % a[15];

      result._value[8] = b[8] % a[0] + b[9] % a[4] + b[10] % a[8] + b[11] % a[12];
      result._value[9] = b[8] % a[1] + b[9] % a[5] + b[10] % a[9] + b[11] % a[13];
      result._value[10] = b[8] % a[2] + b[9] % a[6] + b[10] % a[10] + b[11] % a[14];
      result._value[11] = b[8] % a[3] + b[9] % a[7] + b[10] % a[11] + b[11] % a[15];

      result._value[12] = b[12] % a[0] + b[13] % a[4] + b[14] % a[8] + b[15] % a[12];
      result._value[13] = b[12] % a[1] + b[13] % a[5] + b[14] % a[9] + b[15] % a[13];
      result._value[14] = b[12] % a[2] + b[13] % a[6] + b[14] % a[10] + b[15] % a[14];
      result._value[15] = b[12] % a[3] + b[13] % a[7] + b[14] % a[11] + b[15] % a[15];

      return result;
    }
  }

  func __construct__(self) {
    if value == null {
      let size = 4;

      self._value = [];
      for index in Range.new(0, size) {
        for index2 in Range.new(0, size) {
          self._value = self._value.append(0);
        }
      }
    }
    else {
      self._value = value;
    }
  }

  func contains(self, value) {
    return self.find(value) != -1;
  }

  func len(self) {
    //let _rval = __intern_array_len__(self._value);
    let _rval = 4;
    return _rval;
  }

  func count(self) {
    let _rval = self.len() * self.len();
    //let _rval = 0;
    //for index in Range.new(0, self.len()) {
    //  for index2 in Range.new(0, self.len()) {
    //    _rval += 1;
    //  }
    //}
    return _rval;
  }

  func update(self, index, value) {
    return self.clone().modify(index, value);
  }

  func clone(self) {
    let a = self._value.clone();
    let m = Matrix.new(a.count());
    for index in Range.new(0, a.count()) {
      m[index] = a[index];
    }
    //let m = Matrix.new(a.len());
    //for index in Range.new(0, a.len()) {
    //  for index2 in Range.new(0, a.len()) {
    //    m[index][index2] = a[index][index2];
    //  }
    //}
    return m;
  }

  func find(self, value) {
    let length = self.len();
    let index = 0;
    let index1 = 0;
    let index2 = 0;
    while index1 != length {
      while index2 != length {
        if self._value[index1 * index2] == value {
        //if self._value[index1][index2] == value {
          return index;
        }
        index += 1;
        index1 += 1;
      }
      index2 += 1;
      index1 = 0;
    }
    return -1;
  }

  func map(self, cb) {
    let result = Matrix.new(self.count());
    //let result = Matrix.new(self.len());
    for index in Range.new(0, self.len()) {
      for index2 in Range.new(0, self.len()) {
        result[index * index2] = cb(self[index * index2]);
        //result[index][index2] = cb(self[index][index2]);
      }
    }

    return result;
  }

  // iterable methods
  func step(self) {
    return 1;
  }

  func start(self) {
    return 0;
  }

  func end(self) {
    return self.len();
  }
});
