let CaseInsensitiveDict = Dict.extend({
    name = 'CaseInsensitiveDict'

    instance = {
        _value = [:]
        _normal = [:]

        func __at__(self, key) {
            return __intern_dictionary_at__(self._value, self._getcorrectkey(key));
        }
        
        func __add__(self, value) {
            return self.append(value[0]);
        }

        func __bitor__(self, value) {
            let res_dictionary = self.clone();

            let remaining = value.len();
            let len = value.len();

            let index;
            let item;

            while remaining != 0 {
                index = len - remaining;
                item = value.getpair(index);

                if res_dictionary.findpair(item) == -1 {
                    res_dictionary.append(item);
                }

                remaining -= 1;
            }

            return res_dictionary;
        }

        func __bitand__(self, value) {
            let res_dictionary = [:];

            let remaining = self.len();
            let len = self.len();

            let index;
            let item;

            while remaining != 0 {
                index = len - remaining;
                item = self.getpair(index);

                if value.findpair(item) != -1 {
                    res_dictionary.append(item);
                }

                remaining -= 1;
            }

            return res_dictionary;
        }

        func __iterate__(self, cb: Func) {
            let remaining = self.len();
            let len = self.len();

            while remaining != 0 {
                let index = len - remaining;

                cb(self.getpair(index));

                remaining -= 1;
            }
        }

        func to_str(self) {
            return self._normal.to_str();
        }

        func from(self, index) {
            let len = self.len();
            let newdict = [:];
            // TODO: < not !=
            while index < len {
                newdict += self.getpair(index);
                index += 1;
            }
            return newdict;
        }

        func __set__(self, key, value) {
            __intern_dictionary_set__(self._value, key, value);
            return self;
        }
    }

    // Constructor
    func __construct__(self, value) {
        self._value = [:];
        for pair in value {
            self._value[self._getcorrectkey(pair[0])];
        }
        self._normal = value;
        return self;
    }

    func _getcorrectkey(self, key) {
        if key.type() == Str {
            return key.tolower();
        }
        return key;
    }    
    
    func getkey(self, index) {
        return self.getpair(index)[0];
    }

    func getvalue(self, index) {
        return self.getpair(index)[1];
    }

    func getpair(self, index) {
        return self.atindex(index);
    }

    func atindex(self, index) {
        return __intern_dictionary_atindex__(self._value, index);
    }

    func indexatkey(self, key) {
        let key = self._getcorrectkey(key);
        return __intern_dictionary_indexatkey__(self._value, key);
    }

    func contains(self, key) {
        let key = self._getcorrectkey(key);
        return __intern_dictionary_contains__(self._value, key);
    }

    func to_array(self) {
        return [self.keys(), self.values()];
    }

    func len(self) {
        return __intern_dictionary_len__(self._value);
    }

    func append(self, value) {
        return __intern_dictionary_append__(self._value, [self._getcorrectkey(value[0]), value[1]]);
    }

    func update(self, key, value) {
        let key = self._getcorrectkey(key);
        let result = self.clone().modify(key, value);
        result._normal.modify(result._normal.getkey(result.indexatkey(key)), value);
        return result;
    }

    func clone(self) {
        let result = __intern_dictionary_clone__(self._value);
        result._normal = self._normal.clone();
        return result;
    }

    func find(self, key) {
        let key = self._getcorrectkey(key);
        let length = self.len();
        let index = 0;
        while index != length {
            if self.getkey(index) == key {
                return index;
            }
            index += 1;
        }
        return -1;
    }

    func findpair(self, pair) {
        let pair = [pair[0], self._getcorrectkey(pair[1])];
        let length = self.len();
        let index = 0;
        while index != length {
            if self.getpair(index) == pair {
                return index;
            }
            index += 1;
        }
        return -1;
    }

    func map(self, cb) {
        let result = [:];
        let remaining = self.len();
        let len = self.len();

        while remaining != 0 {
            let index = len - remaining;

            result.append(cb(self.getpair(index)));

            remaining -= 1;
        }

        return result;
    }

    // Iterable methods
    func step(self) {
        return 1;
    }

    func start(self) {
        return 0;
    }

    func end(self) {
        return self.len();
    }

    func keys(self) {
        return __intern_dictionary_keys__(self._value);
    }

    func values(self) {
        return __intern_dictionary_values__(self._value);
    }
});

// Type aliases
let caseinsensitivedict       = CaseInsensitiveDict;
let CaseInsensitiveDictionary = CaseInsensitiveDict;
let caseinsensitivedictionary = CaseInsensitiveDict;
let InsensitiveDict           = CaseInsensitiveDict;
let insensitivedict           = CaseInsensitiveDict;
let InsensitiveDictionary     = CaseInsensitiveDict;
let insensitivedictionary     = CaseInsensitiveDict;
