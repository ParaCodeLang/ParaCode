let Int = Num.extend({
  name = 'Int'

  instance = {
    _value = 0

    func __not__(self) {
      return __intern_int_negate__(self._value);
    }

    func __bool__(self) {
      return !!self._value;
    }

    func __eql__(self, other) {
      if other.type() != self.type() {
        return 0;
      }

      return __intern_default_compare__(self._value, other._value);
    }

    func to_str(self) {
      return __intern_num_to_str__(self._value);
    }

    func to_float(self) {
      return 1.0*self._value;
    }

    func len(self) {
      return self.to_str().len();
    }
  }

  func __construct__(self, value) {
      self._value = __intern_to_int__(value);

      return self;
  }
  
  func __add__(self, other: num) {
      return __intern_int_add__(self._value, other._value);
  }

  func __sub__(self, other: num) {     
      return __intern_int_sub__(self._value, other._value);
  }
  
  func __mul__(self, other: num) {
      return __intern_int_mul__(self._value, other._value);
  }

  func __div__(self, other: num) {     
      return __intern_int_div__(self._value, other._value);
  }
  
  func __mod__(self, other: num) {
      return __intern_int_mod__(self._value, other._value);
  }

  func __bitor__(self, other: int) {
    return __intern_int_bitor__(self._value, other._value);
  }

  func __bitand__(self, other: int) {
    return __intern_int_bitand__(self._value, other._value);
  }

  func __bitxor__(self, other: int) {
    return __intern_int_bitxor__(self._value, other._value);
  }
});
