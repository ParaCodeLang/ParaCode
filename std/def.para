/// Patch `Object` to define `patch` method as well as default compare operator
__intern_object_patch__(Object, {
  func patch(self, _patch) {
    return __intern_object_patch__(self, _patch);
  }
  func __eql__(self, other) {
    return __intern_default_compare__(self, other);
  }
});

Type.patch({
  func to_str(self) {
    return self.name;
  }
});


import "std/types/null.para";
import "std/types/num.para";
import "std/types/float.para";
import "std/types/int.para";
import "std/types/bool.para";
import "std/types/object.para";
import "std/types/func.para";
import "std/types/iterable.para";
import "std/types/array.para";
import "std/types/dict.para";
import "std/types/str.para";
import "std/types/range.para";
import "std/types/macro.para";

//import "std/tkinter/tkinter.para";


import "std/types/math/vectors/vectors.para";
//import "std/types/math/matrix/matrix.para";
import "std/types/math/matrix/matrix3.para";
import "std/types/math/matrix/matrix4.para";

// Type aliases
let object = Object;
let float = Float;
let type = Type;
let array = Array;

let dict = Dict;
let Dictionary = Dict;
let dictionary = Dict;

let num = Num;
let number = Num;
let Number = Num;

let int = Int;
let Integer = Int;
let integer = Int;

let str = Str;
let String = Str;
let string = Str;

let bool = Bool;
let Boolean = Bool;
let boolean = Bool;

let Function = Func;
let function = Func;

//let matrix = Matrix;
//let Mat = Matrix;
//let mat = Matrix;

let matrix3 = Matrix3;
let Mat3 = Matrix3;
let mat3 = Matrix3;

let matrix4 = Matrix4;
let Mat4 = Matrix4;
let mat4 = Matrix4;
