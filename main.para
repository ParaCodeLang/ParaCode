// Lambda Functions
FUNCTION oopify(prefix) -> prefix + "oop"
FUNCTION pooify(suffix) -> "poo" + suffix
FUNCTION nullify(nullifier) -> "NULLIFIED"

// Importing
IMPORT 1.para

// Functions
FUNCTION join(elements, separator)
	// Variables
  VAR result = ""
	VAR len = LEN(elements)

  // For Loops
	FOR i = 0 TO len THEN
		VAR result = result + elements/i
		IF i != len - 1 THEN VAR result = result + separator
	END

  // Returning
	RETURN result
END

FUNCTION map(elements, func)
	VAR new_elements = []

	FOR i = 0 TO LEN(elements) THEN
		APPEND(new_elements, func(elements/i))
	END

	RETURN new_elements
END

FUNCTION loop(numOfTimes, functionToLoop, parameters)
	FOR i = 0 TO numOfTimes THEN
		#FOR o = 0 TO LEN(parameters)
		#APPEND(parameters, func(elements/i))
		#parameters = LEN(parameters)
		functionToLoop(parameters)
	END
END

FUNCTION loop2(numOfTimes, parameter1, parameter1)
	FOR i = 0 TO numOfTimes THEN
		#FOR o = 0 TO LEN(parameters)
		#APPEND(parameters, func(elements/i))
		#parameters = LEN(parameters)
		APPENDFILE(parameter1, parameter2)
	END
END

//FUNCTION loop(numOfTimes, functionToLoop, parameter1, parameter2)
//	FOR i = 0 TO numOfTimes THEN
//		//FOR o = 0 TO LEN(parameters)
//		//APPEND(parameters, func(elements/i))
//		//parameters = LEN(parameters)
//		functionToLoop(parameter1, parameter2)
//	END
//END

//FUNCTION hello(message, message2)
//	PRINT(message)
//	PRINT(message2)
//END

FUNCTION hello(message)
    // Printing
	PRINT(message, "RED")
	PRINT(message, "MAGENTA")
	PRINT(message, "YELLOW")
	PRINT(message, 136)
	PRINT(message, "")
	PRINT(message, NULL)
	ECHO(message, "RED")
	ECHO(message, "MAGENTA")
	ECHO(message, "YELLOW")
	PRINT(message)
	ECHO(message)
	DEBUGLOG(message)
	DEBUGWARN(message)
	DEBUGERR(message)
	DEBUGFATAL(message)
END

// VAR messages = ["WHY HELLO THERE!!", "ParaCode RULES!!!"]
// loop(20, hello, messages)
// loop(20, hello, "WHY HELLO THERE!!", "ParaCode RULES!!!")
// LOOP(hello("WHY HELLO THERE!!"), 20)
loop(20, hello, "WHY HELLO THERE!!")

PRINT(1 + 5 - 3 * 9 / 7)
PRINT(2 - 3 / 6 * 9 + 4 - 1 / 2 * 3)
PRINT(join(map(["l", "ps", "c", "p", "sc"], nullify), ", "))
PRINT(join(map(["l", "sp", "c", "p", "sc"], oopify), ", "))
PRINT(join(map(["l", "ps", "c", "p", "sc"], pooify), ", "))

// Replacing
VAR replace = "REPLACE ME!"
PRINT(replace)
VAR replace = REPLACE(replace, "REP", "rep")
PRINT(replace)

// Date/Time
PRINT(GETDAY())
PRINT(GETMONTH())
PRINT(GETYEAR())
//PRINT(GETDAY() + "/" + GETMONTH() + "/" + GETYEAR())

// File Handling
//IF FILEEXISTS(TEST.txt") THEN DELETEFILE("TEST.txt")
//IF NOT FILEEXISTS(TEST.txt") THEN CREATEFILE("TEST.txt")
//PRINT(FILEEXISTS(TEST.txt"))
//loop2(20, "TEST.txt", "hehe\n")
APPENDFILE("TEST.txt", "hehe
")
APPENDFILE("TEST.txt", "hehe
")
APPENDFILE("TEST.txt", "hehe
")
APPENDFILE("TEST.txt", "hehe
")
APPENDFILE("TEST.txt", "hehe
")
APPENDFILE("TEST.txt", "hehe
")
APPENDFILE("TEST.txt", "hehe
")
APPENDFILE("TEST.txt", "hehe
")

// HALFDIAMONDSTAR(148)
VAR rand = RANDOMNUMBER(1, 149, 3)
PRINT(rand)
HALFDIAMONDSTAR(rand)

PRINT("REMOVE PUNCTUATION: ")
VAR removePunctuation = "A, b, c, & d; e = f * g? 8 % 6 ~ k ___ ' () !"
PRINT(removePunctuation)
VAR removePunctuation = REMOVEPUNCTUATION(removePunctuation)
PRINT(removePunctuation)

PRINT("KEEP PUNCTUATION: ")
VAR keepPunctuation = "A, b, c, & d; e = f * g? 8 % 6 ~ k ___ ' () !"
PRINT(keepPunctuation)
VAR keepPunctuation = KEEPPUNCTUATION(keepPunctuation)
PRINT(keepPunctuation)

PRINT("REMOVE LETTERS: ")
VAR removeLetters = "A, b, c, & d; e = f * g? 8 % 6 ~ k ___ ' () !"
PRINT(removeLetters)
VAR removeLetters = REMOVELETTERS(removeLetters)
PRINT(removeLetters)

PRINT("REMOVE NUMBERS: ")
VAR removeNumbers = "A, b, c, & d; e = f * g? 8 % 6 ~ k ___ ' () !"
PRINT(removeNumbers)
VAR removeNumbers = REMOVENUMBERS(removeNumbers)
PRINT(removeNumbers)

PRINT("REMOVE SPACES: ")
VAR removeSpaces = "A, b, c, & d; e = f * g? 8 % 6 ~ k ___ ' () !"
PRINT(removeSpaces)
VAR removeSpaces = REMOVESPACES(removeSpaces)
PRINT(removeSpaces)

PRINT("REMOVE SPACE-LIKE CHARACTERS: ")
VAR removeAllSpaces = "A, b, c, & d; e = f * g? 8 % 6 ~ k ___ ' () !"
PRINT(removeAllSpaces)
VAR removeAllSpaces = REMOVEALLSPACES(removeAllSpaces)
PRINT(removeAllSpaces)

//PRINT("ORIGINAL MESSAGE")
//VAR originalMessage = "Hello World"
//PRINT(originalMessage)
//VAR cryptoKey = CRYPTOGENERATEKEY()
//PRINT("CRYPTO KEY")
//PRINT(cryptoKey)
//PRINT("ENCRYPTED MESSAGE")
//VAR encryptedMessage = CRYPTOENCRYPT(cryptoKey, originalMessage)
//PRINT(encryptedMessage)
//PRINT("DECRYPTED MESSAGE")
//VAR decryptedMessage = CRYPTODECRYPT(cryptoKey, encryptedMessage)
//PRINT(decryptedMessage)

PRINT("ORIGINAL VALUE")
VAR value = "HELLO, WORLD!"
PRINT(value)
PRINT("ENCODED VALUE")
VAR cryptoEncode = CRYPTOENCODE(value)
PRINT(cryptoEncode)
PRINT("DECODED VALUE")
VAR cryptoDecode = CRYPTODECODE(cryptoEncode)
PRINT(cryptoDecode)

// Turtle Support
// Rainbow Benzene
// VAR turtle = TURTLE()
// VAR colors = ["red", "purple", "blue", "green", "orange", "yellow"]
// TURTLEBGCOLOR("black")
// FOR x = 0 TO 360 THEN
//     VAR o = MODULO(x, 6)
//     TURTLESPEED(10)
//     TURTLEPENCOLOR(INDEXOF(colors, o))
//     //TURTLEWIDTH(x / 100 + 1)
//     TURTLEFORWARD(x)
//     TURTLELEFT(59)
// END

// TURTLEEXITONCLICK()

// Spiral Helix Pattern
// VAR loadWindow = TURTLESCREEN()
// TURTLESPEED(10)

// FOR i = 0 TO 100 THEN
//     TURTLECIRCLE(5*i)
//     TURTLECIRCLE(-5*i)
//     TURTLELEFT(i)
// END

// TURTLEEXITONCLICK()

// VAR wn = TURTLESCREEN()
// TURTLEBGCOLOR("light green")
// TURTLETITLE("Turtle")
// TURTLECOLOR("blue")

// FUNCTION sqrfunc(size)
//     FOR i = 0 TO 4 THEN
//         TURTLEFORWARD(size)
//         TURTLELEFT(90)
//         VAR size = size+5
//     END
// END

// sqrfunc(6)
// sqrfunc(26)
// sqrfunc(46)
// sqrfunc(66)
// sqrfunc(86)
// sqrfunc(106)
// sqrfunc(126)
// sqrfunc(146)

// Window/App Support
//VAR window = MAINLOOPAPP()
//COLOREDLABEL("HELLO, WORLD!", "PURPLE", "RED")
//COLOREDLABEL("HELLO, WORLD!", "RED", "PURPLE")
//LABEL("HELLO, WORLD!")
// The Demo App
//DEMOAPP("TRUE")

//PARAGAMEINIT()
//PRINT("ABC")

# FOR i = 0 TO 5 THEN
	# PRINT(join(map(["l", "sp", "c", "p", "sc"], oopify), ", "))
	# PRINT(join(map(["l", "ps", "c", "p", "sc"], pooify), ", "))
	# RUN("ParaCodeTest.para")
# END
